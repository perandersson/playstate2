<?xml version="1.0" encoding="UTF-8"?>
<Effect>
	<DepthTest>true</DepthTest>
	<Blend>true</Blend>
	<SrcFactor>ONE</SrcFactor>
	<DestFactor>ONE</DestFactor>
	<FrontFace>CCW</FrontFace>
	<CullFace>FRONT</CullFace>
	<VertexShader>
	<![CDATA[
		#version 330

		uniform mat4 ProjectionMatrix;
		uniform mat4 ModelMatrix;
		uniform mat4 ViewMatrix;

		// Light properties
		uniform vec3 LightPosition;
		uniform vec3 SpotDirection;

		// Light Vertex information
		layout(location = 0) in vec3 in_Position;

		// Data to fragment shader
		out vec3 vs_ViewSpacePosition;
		out vec3 vs_ViewSpaceLightPosition;
		out vec3 vs_ViewSpaceSpotDirection;

		void main()
		{			
			// The vertex position (add the supplied LightPosition because we are using a uniform sphere as a model)
			// The rendered model has the size of 1.0. We then resize the model here into it's correct size.
			vec4 Vp = ViewMatrix * ModelMatrix * vec4(in_Position.xyz, 1.0);
			
			// View-space position
			vs_ViewSpacePosition = Vp.xyz;
			
			// View-space light position
			vs_ViewSpaceLightPosition = vec3(ViewMatrix * vec4(LightPosition, 1.0));
			
			// View-space spot direction
			mat4 normalMatrix = transpose(inverse(ViewMatrix * ModelMatrix));
			vs_ViewSpaceSpotDirection = normalize(vec3(normalMatrix * vec4(SpotDirection, 1.0)));
			
			// Render the vertices at the projected position
			gl_Position = ProjectionMatrix * Vp;
		}
	]]>
	</VertexShader>
	<SamplerState Id="LightTexture">
		<MinFilter>LINEAR</MinFilter>
		<MagFilter>LINEAR</MagFilter>
		<WrapS>CLAMP_TO_EDGE</WrapS>
		<WrapT>CLAMP_TO_EDGE</WrapT>
	</SamplerState>
	<SamplerState Id="GeometryTexture">
		<MinFilter>LINEAR</MinFilter>
		<MagFilter>LINEAR</MagFilter>
		<WrapS>CLAMP_TO_EDGE</WrapS>
		<WrapT>CLAMP_TO_EDGE</WrapT>
	</SamplerState>
	<SamplerState Id="ShadowMapTexture">
		<MinFilter>LINEAR</MinFilter>
		<MagFilter>LINEAR</MagFilter>
		<WrapS>CLAMP_TO_EDGE</WrapS>
		<WrapT>CLAMP_TO_EDGE</WrapT>
	</SamplerState>
	<FragmentShader>
	<![CDATA[
		#version 330
				
		// Texture samples to decide if the light should be rendered
		uniform sampler2D GeometryTexture;
		
		// Screen information
		uniform vec2 ScreenSize;
		uniform float FarClipDistance;

		// How the texture looks like
		uniform sampler2D LightTexture;
		
		// Shadow uniforms
		uniform mat4 ShadowMapMatrix;
		uniform float LightFarClipDistance;
		uniform sampler2D ShadowMapTexture;
		const float ShadowBias = 0.0007; // TODO: Make sure that this value is supplied from the light source

		// Variables used by the spotlight
		uniform float CosLightCutoff;
		uniform vec3 LightColor;
		uniform float SpotExponent;

		// Position of the pixel
		in vec3 vs_ViewSpacePosition;
		in vec3 vs_ViewSpaceLightPosition;
		in vec3 vs_ViewSpaceSpotDirection;
		
		/*!
			\brief Calculates the view-space position based on the current pixels depth value
			
			\param screenCoords
			\param depth
		*/
		vec3 CalculateVSpacePosition(in vec2 screenCoords, in float depth)
		{
			// Normalize the view ray
			vec3 viewRay = vec3(vs_ViewSpacePosition.xy * (-FarClipDistance / vs_ViewSpacePosition.z), -FarClipDistance);
				
			// Scale the view ray by the ratio of the linear z value to the projected view ray
			return viewRay * depth;
		}
		
		float chebyshevUpperBound(in vec2 shadowTexCoords, in float distance)
		{
			vec2 moments = texture2D(ShadowMapTexture, shadowTexCoords).rg;
			
			// Surface is fully lit. as the current fragment is before the light occluder
			if (distance <= moments.x)
				return 1.0 ;

			// The fragment is either in shadow or penumbra. We now use chebyshev's upperBound to check
			// How likely this pixel is to be lit (p_max)
			float variance = moments.y - (moments.x * moments.x);
			variance = max(variance, ShadowBias);

			float d = distance - moments.x;
			float p_max = variance / (variance + d*d);

			return p_max;
		}

		void main()
		{
			// Calculate the screen texture coordinates based on the screen size
			vec2 screenCoords = gl_FragCoord.xy / ScreenSize;
				
			// Retrieves the fragment normal
			vec4 geometry = texture2D(GeometryTexture, screenCoords);
			vec3 N = normalize(geometry.xyz * 2.0 - 1.0);
			
			// Get view-space position from the depth value
			vec3 P = CalculateVSpacePosition(screenCoords, geometry.a); 
			
			// Direction from the surface to the light
			vec3 L = normalize(vs_ViewSpaceLightPosition - P);
						
			float clampedCosine = dot(-L, vs_ViewSpaceSpotDirection);
			if (clampedCosine < CosLightCutoff)
				discard;
				
			vec4 positionInLightSpace = ShadowMapMatrix * vec4(P, 1.0);
			vec3 projectTexCoord = positionInLightSpace.xyz / positionInLightSpace.w;
			float linearizeDepth = positionInLightSpace.z / LightFarClipDistance;
			float shadow = chebyshevUpperBound(projectTexCoord.st, linearizeDepth);
				
			// Light color
			vec4 color = texture2D(LightTexture, projectTexCoord.st) * vec4(LightColor, 1.0);
			
			float atten = smoothstep(0.0, CosLightCutoff, clampedCosine);
			float spotIntensity = pow(abs(smoothstep(CosLightCutoff, 1, clampedCosine)), SpotExponent); 
			gl_FragColor = color * spotIntensity * shadow * max(0, dot(L, N));
		}
	]]>
	</FragmentShader>
</Effect>