<?xml version="1.0" encoding="UTF-8"?>
<Effect>
	<DepthTest>false</DepthTest>
	<Blend>true</Blend>
	<SrcFactor>ONE</SrcFactor>
	<DestFactor>ONE</DestFactor>
	<FrontFace>CCW</FrontFace>
	<CullFace>FRONT</CullFace>
	<VertexShader>
	<![CDATA[
		#version 330

		uniform mat4 ProjectionMatrix;
		uniform mat4 ModelMatrix;
		uniform mat4 ViewMatrix;

		// Light properties
		uniform float LightRadius;
		uniform vec3 LightPosition;

		// Light Vertex information
		layout(location = 0) in vec3 in_Position;
		layout(location = 2) in vec2 in_texCoord;

		// Data to fragment shader
		out vec2 vs_TexCoords;
		out vec3 vs_ViewSpacePosition;
		out vec3 vs_ViewSpaceLightPosition;

		void main()
		{			
			// The vertex position (add the supplied LightPosition because we are using a uniform sphere as a model)
			// The rendered model has the size of 1.0. We then resize the model here into it's correct size.
			vec4 Vp = ViewMatrix * ModelMatrix * vec4(in_Position.xyz, 1.0);
			
			// View-space position
			vs_ViewSpacePosition = Vp.xyz;
			
			// View-space light position
			vs_ViewSpaceLightPosition = vec3(ViewMatrix * vec4(LightPosition, 1.0));
			
			// Send the texture coordinates to the fragment shader
			vs_TexCoords = in_texCoord;
			
			// Render the vertices at the projected position
			gl_Position = ProjectionMatrix * Vp;
		}
	]]>
	</VertexShader>
	<SamplerState Id="LightTexture">
		<MinFilter>LINEAR</MinFilter>
		<MagFilter>LINEAR</MagFilter>
		<WrapS>CLAMP_TO_EDGE</WrapS>
		<WrapT>CLAMP_TO_EDGE</WrapT>
	</SamplerState>
	<SamplerState Id="DepthTexture">
		<MinFilter>LINEAR</MinFilter>
		<MagFilter>LINEAR</MagFilter>
		<WrapS>CLAMP_TO_EDGE</WrapS>
		<WrapT>CLAMP_TO_EDGE</WrapT>
	</SamplerState>
	<SamplerState Id="NormalsTexture">
		<MinFilter>LINEAR</MinFilter>
		<MagFilter>LINEAR</MagFilter>
		<WrapS>CLAMP_TO_EDGE</WrapS>
		<WrapT>CLAMP_TO_EDGE</WrapT>
	</SamplerState>
	<FragmentShader>
	<![CDATA[
		#version 330
		
		uniform mat4 ProjectionMatrix;
		uniform mat4 ViewMatrix;

		// Texture samples to decide if the light should be rendered
		uniform sampler2D DepthTexture;
		uniform sampler2D NormalsTexture;
		
		// Screen information
		uniform vec2 ScreenSize;
		uniform float FarClipDistance;

		// How the texture looks like
		uniform sampler2D LightTexture;

		// Variables used by the point light
		uniform float LightRadius;
		uniform vec3 LightColor;
		uniform float ConstantAttenuation;
		uniform float LinearAttenuation;
		uniform float QuadraticAttenuation;

		// Position of the pixel
		in vec2 vs_TexCoords;
		in vec3 vs_ViewSpacePosition;
		in vec3 vs_ViewSpaceLightPosition;
		
		/*!
			\brief Calculates the view-space position based on the current pixels depth value
			
			\param screenCoords
			\param depth
		*/
		vec3 CalculateVSpacePosition(vec2 screenCoords, float depth)
		{
			// Normalize the view ray
			vec3 viewRay = vec3(vs_ViewSpacePosition.xy * (-FarClipDistance / vs_ViewSpacePosition.z), -FarClipDistance);
			//float linearDepth = ProjectionMatrix[2][3] / (depth - ProjectionMatrix[2][2]);
				
			// Scale the view ray by the ratio of the linear z value to the projected view ray
			return viewRay * depth;
		}
		
		void main()
		{
			vec4 color = texture2D(LightTexture, vs_TexCoords) * vec4(LightColor, 1.0);
			if(color.a == 0)
				discard;
				
			// Calculate the screen texture coordinates based on the screen size
			vec2 screenCoords = gl_FragCoord.xy / ScreenSize;
				
			// Retrieves the fragment normal
			vec4 geometry = texture2D(NormalsTexture, screenCoords);
			vec3 N = normalize(geometry.xyz * 2.0 - 1.0);
			
			// Get view-space position
			vec3 P = CalculateVSpacePosition(screenCoords, geometry.a); 
			
			// Direction from the light to the direction
			vec3 L = vs_ViewSpaceLightPosition - P;
			float Ldist = length(L);
			L *= (1.0 / Ldist);
			//if( Ldist > LightRadius ) discard;
			
			// Calculate the light attenuation
			float sqrDist = Ldist * Ldist;
			float atten = max(0, 1 - sqrDist * (1 / (LightRadius*LightRadius)));
			atten *= atten;
	
			//gl_FragColor = color * atten;
			gl_FragColor = vec4(N, 1.0);
		}
	]]>
	</FragmentShader>
</Effect>