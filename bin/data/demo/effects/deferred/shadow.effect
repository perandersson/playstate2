<?xml version="1.0" encoding="UTF-8"?>
<Effect>
	<DepthTest>true</DepthTest>
	<FrontFace>CCW</FrontFace>
	<CullFace>FRONT</CullFace>
	<DepthFunc>LEQUAL</DepthFunc>
	<VertexShader>
	<![CDATA[
		#version 330
		
		// Coordinate system matrices
		uniform mat4 ProjectionViewModelMatrix;
		
		// Vertex information
		layout(location = 0) in vec3 position;

		// Data to fragment shader
		out vec4 vs_ScreenSpacePosition;

		void main()
		{
			// Calculate the screen-space position
			vs_ScreenSpacePosition = ProjectionViewModelMatrix * vec4(position, 1.0);
			
			// Render the vertices at the projected position
			gl_Position = vs_ScreenSpacePosition;
		}
	]]>
	</VertexShader>
	<FragmentShader>
	<![CDATA[
		#version 330

		// Screen information
		uniform float FarClipDistance;

		// Data from vertex shader
		in vec4 vs_ScreenSpacePosition;

		/*!
			\brief Calculate the fragment color for the variance shadow map buffer.
			
			Code based on: http://fabiensanglard.net/shadowmappingVSM/index.php
		*/
		void main()
		{
			// Calculate the linearized depth
			float depth = vs_ScreenSpacePosition.z / FarClipDistance;
			float moment1 = depth;
			float moment2 = depth * depth;
		
			// Adjusting moments (this is sort of bias per pixel) using derivative
			float dx = dFdx(depth);
			float dy = dFdy(depth);
			moment2 += 0.25 *(dx * dx + dy * dy);
			
			gl_FragColor = vec4(moment1, moment2, depth, 0.0);
		}
	]]>
	</FragmentShader>
</Effect>